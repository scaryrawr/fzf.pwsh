name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  analyze:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PowerShell modules for analysis
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -MinimumVersion 5.0

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $analysisResults = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary

          if ($analysisResults) {
            Write-Host "PSScriptAnalyzer found issues:" -ForegroundColor Yellow
            $analysisResults | Format-Table -AutoSize
            
            # Count issues by severity
            $errors = ($analysisResults | Where-Object Severity -eq 'Error').Count
            $warnings = ($analysisResults | Where-Object Severity -eq 'Warning').Count
            $information = ($analysisResults | Where-Object Severity -eq 'Information').Count
            
            Write-Host "Summary: $errors errors, $warnings warnings, $information informational" -ForegroundColor Cyan
            
            # Fail the build if there are errors
            if ($errors -gt 0) {
              Write-Error "Build failed due to PSScriptAnalyzer errors"
              exit 1
            }
          } else {
            Write-Host "No PSScriptAnalyzer issues found!" -ForegroundColor Green
          }

      - name: Validate module manifest
        shell: pwsh
        run: |
          try {
            $manifest = Test-ModuleManifest -Path .\fzf.psd1 -Verbose
            Write-Host "Module manifest is valid!" -ForegroundColor Green
            Write-Host "Module: $($manifest.Name) v$($manifest.Version)" -ForegroundColor Cyan
          } catch {
            Write-Error "Module manifest validation failed: $_"
            exit 1
          }

      - name: Test module import
        shell: pwsh
        run: |
          try {
            Import-Module .\fzf.psm1 -Force -Verbose
            Write-Host "Module imported successfully!" -ForegroundColor Green
            
            # Test that key functions are available
            $requiredFunctions = @(
              'Set-PsFzfKeyBindings',
              'Invoke-FzfFileWidget',
              'Find-FzfFiles'
            )
            
            foreach ($func in $requiredFunctions) {
              if (Get-Command $func -ErrorAction SilentlyContinue) {
                Write-Host "✓ Function $func is available" -ForegroundColor Green
              } else {
                Write-Error "✗ Function $func is missing"
                exit 1
              }
            }
          } catch {
            Write-Error "Module import failed: $_"
            exit 1
          }

      - name: Check for common issues
        shell: pwsh
        run: |
          # Check for hardcoded paths
          Write-Host "Checking for hardcoded paths..." -ForegroundColor Cyan
          $hardcodedPaths = Select-String -Path "*.ps1", "*.psm1" -Pattern 'C:\\|/home/|/Users/' -Exclude "*.Tests.ps1"
          if ($hardcodedPaths) {
            Write-Warning "Found potential hardcoded paths:"
            $hardcodedPaths | ForEach-Object { Write-Host "  $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" }
          }

          # Check for Write-Host usage (should prefer Write-Output or Write-Verbose)
          Write-Host "Checking for Write-Host usage..." -ForegroundColor Cyan
          $writeHostUsage = Select-String -Path "*.ps1", "*.psm1" -Pattern 'Write-Host' -Exclude "*.Tests.ps1", "Test-*.ps1"
          if ($writeHostUsage) {
            Write-Warning "Consider replacing Write-Host with Write-Output or Write-Verbose:"
            $writeHostUsage | ForEach-Object { Write-Host "  $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" }
          }

          Write-Host "Code quality checks completed!" -ForegroundColor Green
